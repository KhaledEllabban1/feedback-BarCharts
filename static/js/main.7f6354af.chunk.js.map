{"version":3,"sources":["utils.js","reportWebVitals.js","index.js","App.js","components/bar-chart/bar-chart.component.jsx"],"names":["myHeaders","Headers","append","requestOptions","method","headers","redirect","getAverage","question","answers","sum","i","length","choices","filter","el","text","id","choice","averagePoints","parseFloat","isNaN","dateFormat","date","getMonth","getDate","getFullYear","month","day","getDates","startDate","stopDate","value","dateArray","Array","currentDate","push","addDays","array","j","temporary","chunk","arr","slice","arraySplit","Math","round","Date","prototype","days","this","valueOf","setDate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","App","document","getElementById","useWindowSize","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","addEventListener","removeEventListener","selectedDateOne","setSelectedDateOne","selectedDateTwo","setSelectedDateTwo","dateFrom","setDateFrom","dateTo","setDateTo","handleDateChange","dateFormatOne","certainAverageOfTime","handleDateChangeTwo","width","Reviews","setReviews","Questions","setQuestions","QuestionTwoAverage","setQuestionTwoAverage","QuestionFourAverage","setQuestionFourAverage","DatesQuestion","setDatesQuestion","useEffect","fetch","response","json","data","enQuestion","findIndex","lang","questions","catch","error","console","log","line_chart_data","duration","questionString","questionNumber","average","startDates","datesFrom","datesTo","questionAnswers","map","answer","questionMeaning","ave","order","eval","QuestionTwoAverageArr","sort","a","b","QuestionFourAverageArr","DatesQuestionArr","questionTwoAnswers","questionFourAnswers","dateOfReview","submitted_at","questionTwoAnswersWithTime","time","questionFourAnswersWithTime","questionTwoMeaning","questionFourMeaning","TotalAverageOfTwo","TotalAverageOfFour","className","utils","DateFnsUtils","container","justifyContent","disableToolbar","InputProps","readOnly","variant","format","margin","label","onChange","KeyboardButtonProps","QuestionTwo","QuestionFour","Dates","defaults","global","tooltips","enabled","legend","position","BarChart","labels","datasets","backgroundColor","borderColor","borderWidth","height","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","fontSize"],"mappings":"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","file":"static/js/main.7f6354af.chunk.js","sourcesContent":["//=========================================== Headers + token + requestOption  ===========================================//\r\nconst token = `SLSmxK17vjRInEWIiFQjwE1QIDfeSM`;\r\nconst myHeaders = new Headers();\r\nmyHeaders.append('Content-type', \"application/json\");\r\nmyHeaders.append(\"Accept\", \"application/json\");\r\nmyHeaders.append(\"Authorization\", `Bearer ${token}`); \r\nexport const requestOptions = {\r\n  method: 'Get',\r\n  headers: myHeaders,\r\n  redirect:'follow'\r\n};\r\n//=========================================== Headers + token + requestOption  ===========================================//\r\n\r\n//=========================================== getAverage Function ===========================================//\r\n\r\n// Calculate the average of Reviews feedback\r\nexport const getAverage = (question, answers) => {\r\n    let sum = 0;\r\n      for(let i =0; i < answers.length ; i++) {\r\n          if( question[0].choices.filter(el => el.text === \"Good\")[0].id === answers[i].choice ) {\r\n              //[id] 4: Good [weight = 1]\r\n              sum += 1\r\n          } else if (question[0].choices.filter(el => el.text === \"Neutral\")[0].id === answers[i].choice  ) {\r\n              //[id] 6: Neutral [weight = 0]\r\n              sum += 0\r\n          } else if (question[0].choices.filter(el => el.text === \"Bad\")[0].id === answers[i].choice  ) {\r\n              //[id] 1: Bad [weight = -1]\r\n              sum += -1\r\n          }\r\n      }\r\n      // console.log(sum);\r\n      let averagePoints = parseFloat((sum / answers.length) * 100 , 10);\r\n      if(isNaN(averagePoints)) averagePoints = 0;\r\n    //   console.log(averagePoints)\r\n      return averagePoints;\r\n}\r\n//=========================================== getAverage Function ===========================================//\r\n\r\n//=========================================== Date Conversion ===========================================//\r\n  \r\n  // converate the date from this form new Date('2019-08-18T21:11:54') to 2019-08-18\r\nexport  const dateFormat = (date) => {\r\n    const [month, day, year] = [date.getMonth(), date.getDate(), date.getFullYear()];\r\n    const dateFormat = `${year}-${month + 1}-${day}`;\r\n    return dateFormat\r\n}\r\n//=========================================== Date Conversion ===========================================//\r\n\r\n//=========================================== arraySplit Fun  ===========================================//\r\n\r\nexport const arraySplit = (array, chunk = 12) => {\r\n    let arr = []\r\n    var i,j, temporary;\r\n    for (i = 0,j = array.length; i < j; i += chunk) {\r\n        temporary = array.slice(i, i + chunk);\r\n        arr.push(temporary)\r\n    }\r\n    // console.log(arr)\r\n    return arr\r\n}\r\n\r\n\r\n//=========================================== arraySplit Fun  ===========================================//\r\n\r\n\r\n//=========================================== getDates Fun  ===========================================//\r\n\r\nDate.prototype.addDays = function(days) {\r\n    var date = new Date(this.valueOf());\r\n    date.setDate(date.getDate() + days);\r\n    return date;\r\n  }\r\n\r\nexport function getDates(startDate, stopDate, value) {\r\n    var dateArray = new Array();\r\n    var currentDate = startDate;\r\n    while (currentDate <= stopDate) {\r\n      const [month, day, year] = [currentDate.getMonth(), currentDate.getDate(), currentDate.getFullYear()];\r\n      const date = `${year}-${month + 1}-${day}`;\r\n        dateArray.push(date);\r\n        currentDate = currentDate.addDays(1);\r\n    }\r\n    const reqDate = arraySplit(dateArray, (Math.round(dateArray.length / value)))\r\n    return reqDate;\r\n}\r\n\r\n//=========================================== getDates Fun  ===========================================//\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import './App.css';\nimport React, { useEffect, useState,useLayoutEffect } from 'react';\nimport 'date-fns';\nimport Grid from '@material-ui/core/Grid';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker\n} from '@material-ui/pickers';\nimport { getAverage, dateFormat, requestOptions, getDates } from './utils';\nimport BarChart from './components/bar-chart/bar-chart.component';\n\n//=========================================== Get the Size of Screen (component) ===========================================//\nconst  useWindowSize =() => {\n  const [size, setSize] = useState(0);\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize(window.innerWidth);\n    }\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  // console.log(\"size\", size)\n    return size\n}\n//=========================================== Get the Size of Screen (component) ===========================================//\n\n//=========================================== start date Picker ===========================================//\nconst App = () => {\n  const [selectedDateOne, setSelectedDateOne] = useState(new Date('2019-08-01T21:11:54'));\n  const [selectedDateTwo, setSelectedDateTwo] = useState(new Date('2019-09-01T21:11:54'));\n  const [dateFrom, setDateFrom] = useState(dateFormat(selectedDateOne));\n  const [dateTo, setDateTo] = useState(dateFormat(selectedDateTwo));\n\n  const handleDateChange = (date) => {\n    setSelectedDateOne(date);\n    const dateFormatOne = dateFormat(date)\n    setDateFrom(dateFormatOne);\n    // console.log(\"dateFormatOne\", dateFormatOne);\n    certainAverageOfTime(\"Two\", 2);\n    certainAverageOfTime(\"Four\", 4);\n  };\n  const handleDateChangeTwo = (date) => {\n    setSelectedDateTwo(date);\n    setDateTo(dateFormat(date));\n    // console.log(\"dateFormatTwo\", dateFormatTwo);\n    certainAverageOfTime(\"Two\", 2);\n    certainAverageOfTime(\"Four\", 4);\n  };\n  //=========================================== end date Picker ===========================================//\n  //=========================================== show 10 results on large screen, 6 results at mediem, 4 in results in small ===========================================//\n  const width = useWindowSize();\n  \n  let value;\n  if ( width < 768 ) {\n    value = 4 \n  } else if (width < 1400) {\n    value = 6\n  } else if ( 1401 < width ) {\n    value = 10\n  } else {\n    value = 0\n  }\n  // console.log(value) \n  //=========================================== show 10 results on large screen, 6 results at mediem, 4 in results in small ===========================================//\n\n  const [Reviews, setReviews] = useState([]);\n  const [Questions, setQuestions] = useState([]);\n  const [QuestionTwoAverage, setQuestionTwoAverage ] = useState([]);\n  const [QuestionFourAverage, setQuestionFourAverage] = useState([]);\n  const [DatesQuestion, setDatesQuestion] = useState([]);\n\n\n  //===========================================**************************** start Requests ************************ ===========================================//\n  useEffect(() => {\n\n    // ******************************************************* start GET Questions *****************************//\n    fetch('https://staging.mymelior.com/v1/questions', requestOptions)\n    .then(response => response.json())\n    .then(\n      data => {\n        // console.log('Questions(ar & en):', data);\n        //choose english version from questions\n        const enQuestion = data.length ? data[data.findIndex(el => el.lang === \"en\")].questions : [] ;\n        // console.log('enQuestions:',Questions) \n        setQuestions(enQuestion);\n      }\n    )\n    .catch( error => console.log(error));\n    // *******************************************************end GET Questions *****************************//\n\n    // ******************************************************* start GET Reviews *****************************//\n    fetch(`https://staging.mymelior.com/v1/branches/1/progress?date_from=${dateFrom}&date_to=${dateTo}`, requestOptions)\n    .then(response => response.json())\n    .then(\n      data => {\n\n        setReviews(data.line_chart_data ? data.line_chart_data : []);\n        // console.log('Reviews :', data.line_chart_data);\n      }\n    )\n    .catch( error => console.log(error));\n    // ******************************************************* end GET Reviews *****************************//\n\n  }, [dateFrom,dateTo]);\n\n  //===========================================**************************** end Requests ************************ ===========================================//\n\n\n  \n  // ******************************************************* Start Solution one of Getting Average to each certain amount of time ***************************//\n\n  const duration = getDates(selectedDateOne,selectedDateTwo, value);\n  // console.log(\"duration:\", duration)\n  const certainAverageOfTime = (questionString, questionNumber) => {\n    let average = [];\n    let startDates = [];\n    for (let i = 0; i < value ; i++) {\n      let datesFrom = duration[i][0]\n      let datesTo   = duration[i][duration[i].length - 1]\n      // console.log(datesFrom);console.log(datesTo)\n    fetch(`https://staging.mymelior.com/v1/branches/1/progress?date_from=${datesFrom}&date_to=${datesTo}`, requestOptions)\n    .then(response => response.json())\n    .then(\n      data => {\n        // console.log(\"result number: \", i)\n        const Reviews = data.line_chart_data ? data.line_chart_data : [] ; \n        const answers = Reviews.map(el=> el.answers);\n        const questionAnswers  = answers.map(answer => answer[ answer.findIndex(el => el.question === questionNumber) ]);\n        // console.log(\"question\", questionAnswers)\n        const questionMeaning =  Questions.filter(question => question.id === questionNumber);\n        let ave = getAverage(questionMeaning, questionAnswers );\n        average.push({order : i, average: ave});\n        startDates.push({order : i, datesFrom: datesFrom});\n        }\n      )\n      .catch( error => console.log(error));\n    }\n    eval(`setQuestion${questionString}Average`)(average) ;\n    setDatesQuestion(startDates);\n  }\n  \n  //                       arrays To Bar Chart                                //\n  const QuestionTwoAverageArr = QuestionTwoAverage.sort(function(a, b) { \n    return a.order - b.order \n  }).map(el => el.average)\n  console.log(\"QuestionTwoAverageArr\", QuestionTwoAverageArr)\n  \n  const QuestionFourAverageArr = QuestionFourAverage.sort(function(a, b) { \n    return a.order - b.order \n  }).map(el => el.average)\n  console.log(\"QuestionFourAverageArr\", QuestionFourAverageArr)\n  \n  const DatesQuestionArr = DatesQuestion.sort(function(a, b) { \n    return a.order - b.order \n  }).map(el => el.datesFrom)\n  console.log(\"DatesQuestionArr\", DatesQuestionArr)\n  \n  //                  logs arrays\n  // console.log(\"QuestionTwoAverage\", QuestionTwoAverage)\n  // console.log(\"QuestionFourAverage\", QuestionFourAverage)\n  // console.log(\"DatesQuestion\", DatesQuestion)\n  //                       arrays To Bar Chart                                //\n\n  // ******************************************************* End Solution one of Getting Average to each certain amount of time *****************************//\n\n  //  ================================ start Get Reviews(Answers) of Question 2 & 4 (Total Average through the Duration) ================================//\n  \n  if( Questions.length > 0 && Reviews.length > 0) {\n    const answers = Reviews.map(el=> el.answers);\n    const questionTwoAnswers  = answers.map(answer => answer[ answer.findIndex(el => el.question === 2) ]);\n    console.log(\"questionTwoAnswers\", questionTwoAnswers);\n    const questionFourAnswers = answers.map(answer => answer[ answer.findIndex(el => el.question === 4) ]);\n    console.log(\"questionFourAnswers\", questionFourAnswers);\n    \n     const dateOfReview = Reviews.map(el=> el.submitted_at);\n\n     const questionTwoAnswersWithTime = () => {     \n        for(let i=0; i < answers.length; i++){\n              questionTwoAnswers[i].time = dateOfReview[i]\n        }\n      }\n      questionTwoAnswersWithTime();\n\n      const questionFourAnswersWithTime = () => {     \n        for(let i=0; i < answers.length; i++){\n          questionFourAnswers[i].time = dateOfReview[i]\n        }\n      }\n      questionFourAnswersWithTime();\n\n    //  ================================ end Get Reviews(Answers) of Question 2 & 4 (Total Average through the Duration) ================================//\n\n    // Get Questions objects\n    const questionTwoMeaning = Questions.filter(question => question.id === 2);\n    const questionFourMeaning = Questions.filter(question => question.id === 4);\n    // console.log(\"questionTwoMeaning\", questionTwoMeaning)\n    // console.log(\"questionFourMeaning\", questionFourMeaning)\n    \n    //  ================================ start Fun to CalCulate the Average ================================//\n\n    const TotalAverageOfTwo = getAverage(questionTwoMeaning, questionTwoAnswers );\n    console.log(\"TotalAverageOfTwo\", TotalAverageOfTwo)\n    const TotalAverageOfFour = getAverage(questionFourMeaning, questionFourAnswers);\n    console.log(\"TotalAverageOfFour\", TotalAverageOfFour)\n    \n    \n    //  ================================ end Fun to CalCulate the Average ================================//\n  }\n    \n    return (\n      <div className=\"App\">\n          <span>Window size: {width} </span>\n         <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <Grid container justifyContent=\"space-around\">\n              <KeyboardDatePicker\n                disableToolbar\n                InputProps={{ readOnly: true }}\n                variant=\"inline\"\n                format=\"MM/dd/yyyy\"\n                margin=\"normal\"\n                id=\"date-picker-inline\"\n                label=\"Start Date\"\n                value={selectedDateOne}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n              <KeyboardDatePicker\n                disableToolbar\n                InputProps={{ readOnly: true }}\n                variant=\"inline\"\n                margin=\"normal\"\n                id=\"date-picker-dialog-1\"\n                label=\"End Date\"\n                format=\"MM/dd/yyyy\"\n                value={selectedDateTwo}\n                onChange={handleDateChangeTwo}\n                KeyboardButtonProps={{\n                  'aria-label': 'change date',\n                }}\n              />\n              \n            </Grid>\n            <Grid>\n              <BarChart QuestionTwo = {QuestionTwoAverageArr} QuestionFour = {QuestionFourAverageArr} Dates = {DatesQuestionArr}  />\n            </Grid>\n          </MuiPickersUtilsProvider>\n      </div>\n    );\n}\n\nexport default App;","import React from 'react'\r\nimport { defaults, Bar } from 'react-chartjs-2'\r\ndefaults.global.tooltips.enabled = true\r\ndefaults.global.legend.position = 'bottom'\r\n\r\nconst BarChart = ({QuestionTwo, QuestionFour, Dates}) => {\r\n  return (\r\n    <div>\r\n      <Bar\r\n        data={{\r\n          labels: Dates,\r\n          datasets: [\r\n            {\r\n              label: 'QuestionTwo',\r\n              data: QuestionTwo,\r\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n              borderColor: 'rgba(255, 99, 132, 1)',\r\n              borderWidth: 1,\r\n            },\r\n            {\r\n              label: 'QuestionFour',\r\n              data: QuestionFour,\r\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n              borderColor: 'rgba(54, 162, 235, 1)',\r\n            },\r\n          ],\r\n        }}\r\n        height={400}\r\n        width={600}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          legend: {\r\n            labels: {\r\n              fontSize: 25,\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BarChart\r\n"],"sourceRoot":""}