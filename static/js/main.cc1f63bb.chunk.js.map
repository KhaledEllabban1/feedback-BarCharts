{"version":3,"sources":["utils.js","components/bar-chart/bar-chart.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["myHeaders","Headers","append","requestOptions","method","headers","redirect","getAverage","question","answers","sum","i","length","choices","filter","el","text","id","choice","averagePoints","parseFloat","isNaN","dateFormat","date","getMonth","getDate","getFullYear","month","day","Date","prototype","addDays","days","this","valueOf","setDate","defaults","global","tooltips","enabled","legend","position","BarChart","QuestionTwo","QuestionFour","Dates","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","height","width","options","maintainAspectRatio","scales","yAxes","ticks","beginAtZero","fontSize","App","value","useState","selectedDateOne","setSelectedDateOne","selectedDateTwo","setSelectedDateTwo","dateFrom","setDateFrom","dateTo","setDateTo","size","setSize","useLayoutEffect","updateSize","window","innerWidth","addEventListener","removeEventListener","useWindowSize","console","log","TotalReviews","setTotalReviews","Questions","setQuestions","allReviews","setAllReviews","DatesQuestion","setDatesQuestion","useEffect","fetch","then","response","json","enQuestion","findIndex","lang","questions","catch","error","line_chart_data","allReviewsVar","startDates","duration","startDate","stopDate","dateArray","Array","currentDate","push","reqDate","array","j","temporary","chunk","arr","slice","arraySplit","Math","round","getDates","datesFrom","datesTo","Reviews","order","rev","allReviewsArr","sort","a","b","map","DatesQuestionArr","ave2","ave4","questionTwoMeaning","questionFourMeaning","questionTwoAnswers","answer","questionFourAnswers","dateOfReview","submitted_at","time","questionTwoAnswersWithTime","questionFourAnswersWithTime","AverageOfTwo","AverageOfFour","TotalAverageOfTwo","TotalAverageOfFour","className","utils","DateFnsUtils","Grid","container","justifyContent","disableToolbar","InputProps","readOnly","variant","format","margin","onChange","dateFormatOne","KeyboardButtonProps","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oOAEMA,EAAY,IAAIC,QACtBD,EAAUE,OAAO,eAAgB,oBACjCF,EAAUE,OAAO,SAAU,oBAC3BF,EAAUE,OAAO,gBAAjB,iBAJW,mCAKJ,IAAMC,EAAiB,CAC5BC,OAAQ,MACRC,QAASL,EACTM,SAAS,UAOEC,EAAa,SAACC,EAAUC,GAE/B,IADF,IAAIC,EAAM,EACAC,EAAG,EAAGA,EAAIF,EAAQG,OAASD,IAC3BH,EAAS,GAAGK,QAAQC,QAAO,SAAAC,GAAE,MAAgB,SAAZA,EAAGC,QAAiB,GAAGC,KAAOR,EAAQE,GAAGO,OAE1ER,GAAO,EACAF,EAAS,GAAGK,QAAQC,QAAO,SAAAC,GAAE,MAAgB,YAAZA,EAAGC,QAAoB,GAAGC,KAAOR,EAAQE,GAAGO,OAEpFR,GAAO,EACAF,EAAS,GAAGK,QAAQC,QAAO,SAAAC,GAAE,MAAgB,QAAZA,EAAGC,QAAgB,GAAGC,KAAOR,EAAQE,GAAGO,SAEhFR,IAAQ,GAIhB,IAAIS,EAAgBC,WAAYV,EAAMD,EAAQG,OAAU,IAAM,IAG9D,OAFGS,MAAMF,KAAgBA,EAAgB,GAElCA,GAOCG,EAAa,SAACC,GAAU,IAAD,EACN,CAACA,EAAKC,WAAYD,EAAKE,UAAWF,EAAKG,eAA3DC,EAD0B,KACnBC,EADmB,KAE3BN,EAAU,UAFiB,KAEjB,YAAcK,EAAQ,EAAtB,YAA2BC,GAC3C,OAAON,GAuBXO,KAAKC,UAAUC,QAAU,SAASC,GAC9B,IAAIT,EAAO,IAAIM,KAAKI,KAAKC,WAEzB,OADAX,EAAKY,QAAQZ,EAAKE,UAAYO,GACvBT,G,oBCpEXa,WAASC,OAAOC,SAASC,SAAU,EACnCH,WAASC,OAAOG,OAAOC,SAAW,SAElC,IA8CeC,EA9CE,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MAC5C,OACE,8BACE,cAAC,MAAD,CACEC,KAAM,CACJC,OAAQF,EACRG,SAAU,CACR,CACEC,MAAO,cACPH,KAAMH,EACNO,gBAAiB,0BACjBC,YAAa,wBACbC,YAAa,GAEf,CACEH,MAAO,eACPH,KAAMF,EACNM,gBAAiB,0BACjBC,YAAa,2BAInBE,OAAQ,IACRC,MAAO,IACPC,QAAS,CACPC,qBAAqB,EACrBC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,aAAa,MAKrBpB,OAAQ,CACNO,OAAQ,CACNc,SAAU,WC0OTC,EAvPH,WAAO,IAmBbC,EAnBY,EAC8BC,mBAAS,IAAInC,KAAK,wBADhD,mBACToC,EADS,KACQC,EADR,OAE8BF,mBAAS,IAAInC,KAAK,wBAFhD,mBAETsC,EAFS,KAEQC,EAFR,OAGgBJ,mBAAS1C,EAAW2C,IAHpC,mBAGTI,EAHS,KAGCC,EAHD,OAIYN,mBAAS1C,EAAW6C,IAJhC,mBAITI,EAJS,KAIDC,EAJC,KAiBVlB,EAjCc,WAAO,IAAD,EACFU,mBAAS,GADP,mBACnBS,EADmB,KACbC,EADa,KAWxB,OATFC,2BAAgB,WACd,SAASC,IACPF,EAAQG,OAAOC,YAIjB,OAFAD,OAAOE,iBAAiB,SAAUH,GAClCA,IACO,kBAAMC,OAAOG,oBAAoB,SAAUJ,MACjD,IAEMH,EAsBKQ,GAIZlB,EADGT,EAAQ,IACH,GACCA,EAAQ,KACT,EACE,KAAOA,EACT,GAEA,EAEV4B,QAAQC,IAAIpB,GA7BI,MAgCwBC,mBAAS,IAhCjC,mBAgCToB,EAhCS,KAgCKC,EAhCL,OAiCkBrB,mBAAS,IAjC3B,mBAiCTsB,EAjCS,KAiCEC,EAjCF,OAkCoBvB,mBAAS,IAlC7B,mBAkCTwB,EAlCS,KAkCGC,EAlCH,OAmCqCzB,mBAAS,IAnC9C,gCAoCsCA,mBAAS,KApC/C,gCAqC0BA,mBAAS,KArCnC,mBAqCT0B,EArCS,KAqCMC,EArCN,KAyChBC,qBAAU,WAGRC,MAAM,4CAA6C1F,GAClD2F,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MACC,SAAAhD,GAGE,IAAMmD,EAAanD,EAAKlC,OAASkC,EAAKA,EAAKoD,WAAU,SAAAnF,GAAE,MAAgB,OAAZA,EAAGoF,SAAgBC,UAAY,GAE1Fb,EAAaU,MAGhBI,OAAO,SAAAC,GAAK,OAAIpB,QAAQC,IAAImB,MAI7BT,MAAM,iEAAD,OAAkExB,EAAlE,oBAAsFE,GAAUpE,GACpG2F,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MACC,SAAAhD,GACEuC,EAAgBvC,EAAKyD,gBAAkBzD,EAAKyD,gBAAkB,OAIjEF,OAAO,SAAAC,GAAK,OAAIpB,QAAQC,IAAImB,MAO7B,IAHA,IAAIE,EAAgB,GAChBC,EAAa,GA/BH,WAiCL9F,GACP,IAAM+F,EF/BL,SAAkBC,EAAWC,EAAU7C,GAG1C,IAFA,IAAI8C,EAAY,IAAIC,MAChBC,EAAcJ,EACXI,GAAeH,GAAU,CAAC,IAAD,EACH,CAACG,EAAYvF,WAAYuF,EAAYtF,UAAWsF,EAAYrF,eAAhFC,EADuB,KAChBC,EADgB,KAExBL,EAAI,UAFoB,KAEpB,YAAcI,EAAQ,EAAtB,YAA2BC,GACnCiF,EAAUG,KAAKzF,GACfwF,EAAcA,EAAYhF,QAAQ,GAEtCmD,QAAQC,IAAI0B,GACZ,IAAMI,EAjCgB,SAACC,GAAuB,IAE1CvG,EAAEwG,EAAGC,EAFqBC,EAAe,uDAAP,GAClCC,EAAM,GAEV,IAAK3G,EAAI,EAAEwG,EAAID,EAAMtG,OAAQD,EAAIwG,EAAGxG,GAAK0G,EACrCD,EAAYF,EAAMK,MAAM5G,EAAGA,EAAI0G,GAC/BC,EAAIN,KAAKI,GAGb,OAAOE,EAyBSE,CAAWX,EAAYY,KAAKC,MAAMb,EAAUjG,OAASmD,IAErE,OADAmB,QAAQC,IAAI8B,GACLA,EEmBYU,CAAS1D,EAAgBE,EAAiBJ,GACvD6D,EAAYlB,EAAS/F,GAAG,GACxBkH,EAAYnB,EAAS/F,GAAG+F,EAAS/F,GAAGC,OAAS,GAEnDiF,MAAM,iEAAD,OAAkE+B,EAAlE,oBAAuFC,GAAW1H,GACtG2F,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MACC,SAAAhD,GACE,IAAMgF,EAAUhF,EAAKyD,gBAAkBzD,EAAKyD,gBAAkB,GAC9DC,EAAcQ,KAAK,CAACe,MAAQpH,EAAGqH,IAAKF,IACpCrB,EAAWO,KAAK,CAACe,MAAQpH,EAAGiH,UAAWA,OAGxCvB,OAAO,SAAAC,GAAK,OAAIpB,QAAQC,IAAImB,OAdtB3F,EAAI,EAAGA,EAAIoD,EAAQpD,IAAM,EAAzBA,GAgBTuE,QAAQC,IAAI,4BAA4BqB,GACxCf,EAAce,GACdb,EAAiBc,KAGhB,CAACpC,EAASE,EAAON,EAAiBE,IAKrC,IAAM8D,EAAiBzC,EAAW0C,MAAK,SAASC,EAAGC,GACjD,OAAOD,EAAEJ,MAAQK,EAAEL,SAClBM,KAAI,SAAAtH,GAAE,OAAIA,EAAGiH,OAChB9C,QAAQC,IAAI,6BAA6B8C,GAEzC,IAAMK,EAAmB5C,EAAcwC,MAAK,SAASC,EAAGC,GACtD,OAAOD,EAAEJ,MAAQK,EAAEL,SAClBM,KAAI,SAAAtH,GAAE,OAAIA,EAAG6G,aAChB1C,QAAQC,IAAI,mBAAoBmD,GAEhC,IAAIC,EAAO,GACPC,EAAO,GACX,GAAIlD,EAAU1E,OAAS,GAAK4E,EAAW5E,OAAS,EAAG,CAOjD,IALA,IAAM6H,EAAqBnD,EAAUxE,QAAO,SAAAN,GAAQ,OAAoB,IAAhBA,EAASS,MAC3DyH,GAAsBpD,EAAUxE,QAAO,SAAAN,GAAQ,OAAoB,IAAhBA,EAASS,MAHjB,YAOxCN,GACP,IAAMF,EAAUwH,EAActH,GAAG0H,KAAI,SAAAtH,GAAE,OAAGA,EAAGN,WACvCkI,EAAsBlI,EAAQ4H,KAAI,SAAAO,GAAM,OAAIA,EAAQA,EAAO1C,WAAU,SAAAnF,GAAE,OAAoB,IAAhBA,EAAGP,gBAE9EqI,EAAsBpI,EAAQ4H,KAAI,SAAAO,GAAM,OAAIA,EAAQA,EAAO1C,WAAU,SAAAnF,GAAE,OAAoB,IAAhBA,EAAGP,gBAI9EsI,EAAe1D,EAAaiD,KAAI,SAAAtH,GAAE,OAAGA,EAAGgI,iBACX,WACjC,IAAI,IAAIpI,EAAE,EAAGA,EAAIF,EAAQG,OAAQD,IAC/BgI,EAAmBhI,GAAGqI,KAAOF,EAAanI,GAG9CsI,IAEoC,WAClC,IAAI,IAAItI,EAAE,EAAGA,EAAIF,EAAQG,OAAQD,IAC/BkI,EAAoBlI,GAAGqI,KAAOF,EAAanI,GAG/CuI,GAIA,IAAMC,EAAe5I,EAAWkI,EAAoBE,GACpDJ,EAAKvB,KAAKmC,GACV,IAAMC,EAAgB7I,EAAWmI,GAAqBG,GACtDL,EAAKxB,KAAKoC,IA5BHzI,GAAI,EAAGA,GAAIsH,EAAcrH,OAAQD,KAAM,GAAvCA,IAkCTuE,QAAQC,IAAIoD,GACZrD,QAAQC,IAAIqD,GAOd,GAAIlD,EAAU1E,OAAS,GAAKwE,EAAaxE,OAAS,EAAG,CACnD,IAAMH,GAAU2E,EAAaiD,KAAI,SAAAtH,GAAE,OAAGA,EAAGN,WACnCkI,GAAsBlI,GAAQ4H,KAAI,SAAAO,GAAM,OAAIA,EAAQA,EAAO1C,WAAU,SAAAnF,GAAE,OAAoB,IAAhBA,EAAGP,gBACpF0E,QAAQC,IAAI,qBAAsBwD,IAClC,IAAME,GAAsBpI,GAAQ4H,KAAI,SAAAO,GAAM,OAAIA,EAAQA,EAAO1C,WAAU,SAAAnF,GAAE,OAAoB,IAAhBA,EAAGP,gBACpF0E,QAAQC,IAAI,sBAAuB0D,IAElC,IAAMC,GAAe1D,EAAaiD,KAAI,SAAAtH,GAAE,OAAGA,EAAGgI,iBAEX,WAChC,IAAI,IAAIpI,EAAE,EAAGA,EAAIF,GAAQG,OAAQD,IAC3BgI,GAAmBhI,GAAGqI,KAAOF,GAAanI,GAGlDsI,IAEoC,WAClC,IAAI,IAAItI,EAAE,EAAGA,EAAIF,GAAQG,OAAQD,IAC/BkI,GAAoBlI,GAAGqI,KAAOF,GAAanI,GAG/CuI,GAIF,IAAMT,GAAqBnD,EAAUxE,QAAO,SAAAN,GAAQ,OAAoB,IAAhBA,EAASS,MAC3DyH,GAAsBpD,EAAUxE,QAAO,SAAAN,GAAQ,OAAoB,IAAhBA,EAASS,MAM5DoI,GAAoB9I,EAAWkI,GAAoBE,IACzDzD,QAAQC,IAAI,oBAAqBkE,IACjC,IAAMC,GAAqB/I,EAAWmI,GAAqBG,IAC3D3D,QAAQC,IAAI,qBAAsBmE,IAQlC,OACE,sBAAKC,UAAU,MAAf,UACI,iDAAoBjG,EAApB,OACD,eAAC,IAAD,CAAyBkG,MAAOC,IAAhC,UACG,eAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAe,eAA/B,UACE,cAAC,IAAD,CACEC,gBAAc,EACdC,WAAY,CAAEC,UAAU,GACxBC,QAAQ,SACRC,OAAO,aACPC,OAAO,SACPjJ,GAAG,qBACHgC,MAAM,aACNc,MAAOE,EACPkG,SApNW,SAAC5I,GACxB2C,EAAmB3C,GACnB,IAAM6I,EAAgB9I,EAAWC,GACjC+C,EAAY8F,IAkNAC,oBAAqB,CACnB,aAAc,iBAGlB,cAAC,IAAD,CACER,gBAAc,EACdC,WAAY,CAAEC,UAAU,GACxBC,QAAQ,SACRE,OAAO,SACPjJ,GAAG,uBACHgC,MAAM,WACNgH,OAAO,aACPlG,MAAOI,EACPgG,SA7Nc,SAAC5I,GAC3B6C,EAAmB7C,GACnBiD,EAAUlD,EAAWC,KA4NT8I,oBAAqB,CACnB,aAAc,oBAKpB,cAACX,EAAA,EAAD,UACE,cAAC,EAAD,CAAU/G,YAAe4F,EAAM3F,aAAgB4F,EAAM3F,MAASyF,aCjQ7DgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB1E,MAAK,YAAkD,IAA/C2E,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.cc1f63bb.chunk.js","sourcesContent":["//=========================================== Headers + token + requestOption  ===========================================//\r\nconst token = `SLSmxK17vjRInEWIiFQjwE1QIDfeSM`;\r\nconst myHeaders = new Headers();\r\nmyHeaders.append('Content-type', \"application/json\");\r\nmyHeaders.append(\"Accept\", \"application/json\");\r\nmyHeaders.append(\"Authorization\", `Bearer ${token}`); \r\nexport const requestOptions = {\r\n  method: 'Get',\r\n  headers: myHeaders,\r\n  redirect:'follow'\r\n};\r\n//=========================================== Headers + token + requestOption  ===========================================//\r\n\r\n//=========================================== getAverage Function ===========================================//\r\n\r\n// Calculate the average of Reviews feedback\r\nexport const getAverage = (question, answers) => {\r\n    let sum = 0;\r\n      for(let i =0; i < answers.length ; i++) {\r\n          if( question[0].choices.filter(el => el.text === \"Good\")[0].id === answers[i].choice ) {\r\n              //[id] 4: Good [weight = 1]\r\n              sum += 1\r\n          } else if (question[0].choices.filter(el => el.text === \"Neutral\")[0].id === answers[i].choice  ) {\r\n              //[id] 6: Neutral [weight = 0]\r\n              sum += 0\r\n          } else if (question[0].choices.filter(el => el.text === \"Bad\")[0].id === answers[i].choice  ) {\r\n              //[id] 1: Bad [weight = -1]\r\n              sum += -1\r\n          }\r\n      }\r\n      // console.log(sum);\r\n      let averagePoints = parseFloat((sum / answers.length) * 100 , 10);\r\n      if(isNaN(averagePoints)) averagePoints = 0;\r\n    //   console.log(averagePoints)\r\n      return averagePoints;\r\n}\r\n//=========================================== getAverage Function ===========================================//\r\n\r\n//=========================================== Date Conversion ===========================================//\r\n  \r\n  // converate the date from this form new Date('2019-08-18T21:11:54') to 2019-08-18\r\nexport  const dateFormat = (date) => {\r\n    const [month, day, year] = [date.getMonth(), date.getDate(), date.getFullYear()];\r\n    const dateFormat = `${year}-${month + 1}-${day}`;\r\n    return dateFormat\r\n}\r\n//=========================================== Date Conversion ===========================================//\r\n\r\n//=========================================== arraySplit Fun  ===========================================//\r\n\r\nexport const arraySplit = (array, chunk = 12) => {\r\n    let arr = []\r\n    var i,j, temporary;\r\n    for (i = 0,j = array.length; i < j; i += chunk) {\r\n        temporary = array.slice(i, i + chunk);\r\n        arr.push(temporary)\r\n    }\r\n    // console.log(arr)\r\n    return arr\r\n}\r\n\r\n\r\n//=========================================== arraySplit Fun  ===========================================//\r\n\r\n\r\n//=========================================== getDates Fun  ===========================================//\r\n\r\nDate.prototype.addDays = function(days) {\r\n    var date = new Date(this.valueOf());\r\n    date.setDate(date.getDate() + days);\r\n    return date;\r\n  }\r\n\r\nexport function getDates(startDate, stopDate, value) {\r\n    var dateArray = new Array();\r\n    var currentDate = startDate;\r\n    while (currentDate <= stopDate) {\r\n      const [month, day, year] = [currentDate.getMonth(), currentDate.getDate(), currentDate.getFullYear()];\r\n      const date = `${year}-${month + 1}-${day}`;\r\n        dateArray.push(date);\r\n        currentDate = currentDate.addDays(1);\r\n    }\r\n    console.log(dateArray)\r\n    const reqDate = arraySplit(dateArray, (Math.round(dateArray.length / value)))\r\n    console.log(reqDate)\r\n    return reqDate;\r\n}\r\n","import React from 'react'\r\nimport { defaults, Bar } from 'react-chartjs-2'\r\ndefaults.global.tooltips.enabled = true\r\ndefaults.global.legend.position = 'bottom'\r\n\r\nconst BarChart = ({QuestionTwo, QuestionFour, Dates}) => {\r\n  return (\r\n    <div>\r\n      <Bar\r\n        data={{\r\n          labels: Dates,\r\n          datasets: [\r\n            {\r\n              label: 'QuestionTwo',\r\n              data: QuestionTwo,\r\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n              borderColor: 'rgba(255, 99, 132, 1)',\r\n              borderWidth: 1,\r\n            },\r\n            {\r\n              label: 'QuestionFour',\r\n              data: QuestionFour,\r\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n              borderColor: 'rgba(54, 162, 235, 1)',\r\n            },\r\n          ],\r\n        }}\r\n        height={400}\r\n        width={600}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          scales: {\r\n            yAxes: [\r\n              {\r\n                ticks: {\r\n                  beginAtZero: true,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n          legend: {\r\n            labels: {\r\n              fontSize: 25,\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BarChart\r\n","import './App.css';\r\nimport React, { useEffect, useState,useLayoutEffect } from 'react';\r\nimport 'date-fns';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker\r\n} from '@material-ui/pickers';\r\nimport { getAverage, dateFormat, requestOptions, getDates } from './utils';\r\nimport BarChart from './components/bar-chart/bar-chart.component';\r\n\r\n//=========================================== Get the Size of Screen (component) ===========================================//\r\nconst  useWindowSize =() => {\r\n  const [size, setSize] = useState(0);\r\n  useLayoutEffect(() => {\r\n    function updateSize() {\r\n      setSize(window.innerWidth);\r\n    }\r\n    window.addEventListener('resize', updateSize);\r\n    updateSize();\r\n    return () => window.removeEventListener('resize', updateSize);\r\n  }, []);\r\n  // console.log(\"size\", size)\r\n    return size\r\n}\r\n//=========================================== Get the Size of Screen (component) ===========================================//\r\n\r\n//=========================================== start date Picker ===========================================//\r\nconst App = () => {\r\n  const [selectedDateOne, setSelectedDateOne] = useState(new Date('2019-08-01T21:11:54'));\r\n  const [selectedDateTwo, setSelectedDateTwo] = useState(new Date('2019-09-01T21:11:54'));\r\n  const [dateFrom, setDateFrom] = useState(dateFormat(selectedDateOne));\r\n  const [dateTo, setDateTo] = useState(dateFormat(selectedDateTwo));\r\n\r\n  const handleDateChange = (date) => {\r\n    setSelectedDateOne(date);\r\n    const dateFormatOne = dateFormat(date)\r\n    setDateFrom(dateFormatOne);\r\n  };\r\n  const handleDateChangeTwo = (date) => {\r\n    setSelectedDateTwo(date);\r\n    setDateTo(dateFormat(date));\r\n  };\r\n  //=========================================== end date Picker ===========================================//\r\n  //=========================================== show 10 results on large screen, 6 results at mediem, 4 in results in small ===========================================//\r\n  const width = useWindowSize();\r\n  \r\n  let value;\r\n  if ( width < 768 ) {\r\n    value = 10 \r\n  } else if (width < 1400) {\r\n    value = 6\r\n  } else if ( 1401 < width ) {\r\n    value = 10\r\n  } else {\r\n    value = 0\r\n  }\r\n  console.log(value) \r\n  //=========================================== show 10 results on large screen, 6 results at mediem, 4 in results in small ===========================================//\r\n\r\n  const [TotalReviews, setTotalReviews] = useState([]);\r\n  const [Questions, setQuestions] = useState([]);\r\n  const [allReviews, setAllReviews] = useState([]);\r\n  const [QuestionTwoAverage, setQuestionTwoAverage ] = useState([]);\r\n  const [QuestionFourAverage, setQuestionFourAverage] = useState([]);\r\n  const [DatesQuestion, setDatesQuestion] = useState([]);\r\n\r\n\r\n  //===========================================**************************** start Requests ************************ ===========================================//\r\n  useEffect(() => {\r\n\r\n    // ******************************************************* start GET Questions *****************************//\r\n    fetch('https://staging.mymelior.com/v1/questions', requestOptions)\r\n    .then(response => response.json())\r\n    .then(\r\n      data => {\r\n        // console.log('Questions(ar & en):', data);\r\n        //choose english version from questions\r\n        const enQuestion = data.length ? data[data.findIndex(el => el.lang === \"en\")].questions : [] ;\r\n        // console.log('enQuestions:',Questions) \r\n        setQuestions(enQuestion);\r\n      }\r\n    )\r\n    .catch( error => console.log(error));\r\n    // *******************************************************end GET Questions *****************************//\r\n\r\n    // ******************************************************* start GET Total Reviews *****************************//\r\n    fetch(`https://staging.mymelior.com/v1/branches/1/progress?date_from=${dateFrom}&date_to=${dateTo}`, requestOptions)\r\n    .then(response => response.json())\r\n    .then(\r\n      data => {\r\n        setTotalReviews(data.line_chart_data ? data.line_chart_data : []);\r\n        // console.log('Reviews :', data.line_chart_data);\r\n      }\r\n    )\r\n    .catch( error => console.log(error));\r\n    // ******************************************************* end GET Total Reviews  **********************************//\r\n\r\n    // ******************************************************* end GET Reviews In Duration *****************************//\r\n    let allReviewsVar = [];\r\n    let startDates = [];\r\n    // console.log(\"selectedDateOne\",selectedDateOne);console.log(\"selectedDateTwo\", selectedDateTwo) \r\n    for (let i = 0; i < value ; i++) {\r\n      const duration = getDates(selectedDateOne,selectedDateTwo, value);\r\n      let datesFrom = duration[i][0]\r\n      let datesTo   = duration[i][duration[i].length - 1]\r\n      // console.log(datesFrom);console.log(datesTo)\r\n    fetch(`https://staging.mymelior.com/v1/branches/1/progress?date_from=${datesFrom}&date_to=${datesTo}`, requestOptions)\r\n    .then(response => response.json())\r\n    .then(\r\n      data => {\r\n        const Reviews = data.line_chart_data ? data.line_chart_data : [] ; \r\n        allReviewsVar.push({order : i, rev: Reviews});\r\n        startDates.push({order : i, datesFrom: datesFrom});\r\n        }\r\n      )\r\n      .catch( error => console.log(error));\r\n    }\r\n    console.log(\"Revvvvvvvvvvvvvvvvvvvvvvv\",allReviewsVar)\r\n    setAllReviews(allReviewsVar)\r\n    setDatesQuestion(startDates);\r\n\r\n    // ******************************************************* end GET Reviews In Duration *****************************//\r\n  }, [dateFrom,dateTo,selectedDateOne, selectedDateTwo]);\r\n\r\n  //===========================================**************************** end Requests ************************ ===========================================//\r\n\r\n  //  ================================ start Get Reviews(Answers) of Question 2 & 4 (Average through the Duration) ======================================//\r\n  const allReviewsArr =  allReviews.sort(function(a, b) { \r\n    return a.order - b.order \r\n  }).map(el => el.rev)\r\n  console.log(\"allReviewsArrrrrrrrrrrrrrr\",allReviewsArr)\r\n  \r\n  const DatesQuestionArr = DatesQuestion.sort(function(a, b) { \r\n    return a.order - b.order \r\n  }).map(el => el.datesFrom)\r\n  console.log(\"DatesQuestionArr\", DatesQuestionArr)\r\n\r\n  let ave2 = [];\r\n  let ave4 = [];\r\n  if( Questions.length > 0 && allReviews.length > 0) {\r\n    // Get Questions objects\r\n    const questionTwoMeaning = Questions.filter(question => question.id === 2);\r\n    const questionFourMeaning = Questions.filter(question => question.id === 4);\r\n    // console.log(\"questionTwoMeaning\", questionTwoMeaning)\r\n    // console.log(\"questionFourMeaning\", questionFourMeaning)\r\n\r\n    for (let i = 0; i < allReviewsArr.length; i++) {\r\n      const answers = allReviewsArr[i].map(el=> el.answers);\r\n      const questionTwoAnswers  = answers.map(answer => answer[ answer.findIndex(el => el.question === 2) ]);\r\n      // console.log(\"AnswersTwoInDurrrrrrrrrr\", questionTwoAnswers);\r\n      const questionFourAnswers = answers.map(answer => answer[ answer.findIndex(el => el.question === 4) ]);\r\n      // console.log(\"AnswersFourInDurrrrrrrrrrrr\", questionFourAnswers); \r\n      \r\n      //*******************attach date**************************************//\r\n      const dateOfReview = TotalReviews.map(el=> el.submitted_at);\r\n      const questionTwoAnswersWithTime = () => {     \r\n        for(let i=0; i < answers.length; i++){\r\n          questionTwoAnswers[i].time = dateOfReview[i]\r\n        }\r\n      }\r\n      questionTwoAnswersWithTime();\r\n      \r\n      const questionFourAnswersWithTime = () => {     \r\n        for(let i=0; i < answers.length; i++){\r\n          questionFourAnswers[i].time = dateOfReview[i]\r\n        }\r\n      }\r\n      questionFourAnswersWithTime();\r\n      //*******************attach date**************************************//\r\n      //  ================================ start Fun to CalCulate the Average ================================//\r\n\r\n      const AverageOfTwo = getAverage(questionTwoMeaning, questionTwoAnswers );\r\n      ave2.push(AverageOfTwo);\r\n      const AverageOfFour = getAverage(questionFourMeaning, questionFourAnswers);\r\n      ave4.push(AverageOfFour);\r\n\r\n\r\n      //  ================================ end Fun to CalCulate the Average ================================//\r\n\r\n    }\r\n    console.log(ave2)\r\n    console.log(ave4)\r\n    \r\n  }\r\n\r\n  //  ================================ end   Get Reviews(Answers) of Question 2 & 4 (Average through the Duration) ======================================//\r\n  //  ================================ start Get Reviews(Answers) of Question 2 & 4 (Total Average through the Duration) ================================//\r\n  \r\n  if( Questions.length > 0 && TotalReviews.length > 0) {\r\n    const answers = TotalReviews.map(el=> el.answers);\r\n    const questionTwoAnswers  = answers.map(answer => answer[ answer.findIndex(el => el.question === 2) ]);\r\n    console.log(\"questionTwoAnswers\", questionTwoAnswers);\r\n    const questionFourAnswers = answers.map(answer => answer[ answer.findIndex(el => el.question === 4) ]);\r\n    console.log(\"questionFourAnswers\", questionFourAnswers);\r\n    \r\n     const dateOfReview = TotalReviews.map(el=> el.submitted_at);\r\n\r\n     const questionTwoAnswersWithTime = () => {     \r\n        for(let i=0; i < answers.length; i++){\r\n              questionTwoAnswers[i].time = dateOfReview[i]\r\n        }\r\n      }\r\n      questionTwoAnswersWithTime();\r\n\r\n      const questionFourAnswersWithTime = () => {     \r\n        for(let i=0; i < answers.length; i++){\r\n          questionFourAnswers[i].time = dateOfReview[i]\r\n        }\r\n      }\r\n      questionFourAnswersWithTime();\r\n\r\n\r\n    // Get Questions objects\r\n    const questionTwoMeaning = Questions.filter(question => question.id === 2);\r\n    const questionFourMeaning = Questions.filter(question => question.id === 4);\r\n    // console.log(\"questionTwoMeaning\", questionTwoMeaning)\r\n    // console.log(\"questionFourMeaning\", questionFourMeaning)\r\n    \r\n    //  ================================ start Fun to CalCulate the Average ================================//\r\n\r\n    const TotalAverageOfTwo = getAverage(questionTwoMeaning, questionTwoAnswers );\r\n    console.log(\"TotalAverageOfTwo\", TotalAverageOfTwo)\r\n    const TotalAverageOfFour = getAverage(questionFourMeaning, questionFourAnswers);\r\n    console.log(\"TotalAverageOfFour\", TotalAverageOfFour)\r\n    \r\n    \r\n    //  ================================ end Fun to CalCulate the Average ================================//\r\n    //  ================================ end Get Reviews(Answers) of Question 2 & 4 (Total Average through the Duration) ================================//\r\n\r\n  }\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n          <span>Window size: {width} </span>\r\n         <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n            <Grid container justifyContent=\"space-around\">\r\n              <KeyboardDatePicker\r\n                disableToolbar\r\n                InputProps={{ readOnly: true }}\r\n                variant=\"inline\"\r\n                format=\"MM/dd/yyyy\"\r\n                margin=\"normal\"\r\n                id=\"date-picker-inline\"\r\n                label=\"Start Date\"\r\n                value={selectedDateOne}\r\n                onChange={handleDateChange}\r\n                KeyboardButtonProps={{\r\n                  'aria-label': 'change date',\r\n                }}\r\n              />\r\n              <KeyboardDatePicker\r\n                disableToolbar\r\n                InputProps={{ readOnly: true }}\r\n                variant=\"inline\"\r\n                margin=\"normal\"\r\n                id=\"date-picker-dialog-1\"\r\n                label=\"End Date\"\r\n                format=\"MM/dd/yyyy\"\r\n                value={selectedDateTwo}\r\n                onChange={handleDateChangeTwo}\r\n                KeyboardButtonProps={{\r\n                  'aria-label': 'change date',\r\n                }}\r\n              />\r\n              \r\n            </Grid>\r\n            <Grid>\r\n              <BarChart QuestionTwo = {ave2} QuestionFour = {ave4} Dates = {DatesQuestionArr}  />\r\n            </Grid>\r\n          </MuiPickersUtilsProvider>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}